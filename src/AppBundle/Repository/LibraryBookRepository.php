<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Book;
use AppBundle\Entity\User;


/**
 * LibraryBookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LibraryBookRepository extends \Doctrine\ORM\EntityRepository
{
    public function exchangeList(User $user = null)
    {
        $qb = $this
            ->createQueryBuilder('lb')
            ->where('lb.exchange = true')
        ;
        if ($user){
            $qb->andWhere('lb.user <> :user')
                ->setParameter('user',$user)
            ;
        }
        $qb->orderBy('lb.dateAjout','ASC');
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function giveawayList(User $user = null)
    {
        $qb = $this
            ->createQueryBuilder('lb')
            ->where('lb.giveaway = true')
        ;
        if ($user){
            $qb->andWhere('lb.user <> :user')
                ->setParameter('user',$user)
            ;
        }
        $qb->orderBy('lb.dateAjout','ASC');
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function sellList(User $user = null)
    {
        $qb = $this
            ->createQueryBuilder('lb')
            ->where('lb.sell = true')
        ;
        if ($user){
            $qb->andWhere('lb.user <> :user')
                ->setParameter('user',$user)
            ;
        }
        $qb->orderBy('lb.dateAjout','ASC');
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function bookSellList(Book $book){
        $qb = $this
            ->createQueryBuilder('lb')
            ->where('lb.book = :book')
            ->andWhere('lb.sell = true')
            ->setParameter('book', $book->getId())
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function bookEchangeList(Book $book){
        $qb = $this
            ->createQueryBuilder('lb')
            ->where('lb.book = :book')
            ->andWhere('lb.exchange = true')
            ->setParameter('book', $book->getId())
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function bookGiveawayList(Book $book){
        $qb = $this
            ->createQueryBuilder('lb')
            ->where('lb.book = :book')
            ->andWhere('lb.giveaway = true')
            ->setParameter('book', $book->getId())
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function lastAddedBooks($limit){
        $qb = $this
            ->createQueryBuilder('lb')
            ->orderBy('lb.dateAjout','DESC')
            ->setMaxResults($limit)
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }




}
