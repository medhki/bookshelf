<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Author;
use AppBundle\Entity\AuthorBook;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends \Doctrine\ORM\EntityRepository
{
    public function simpleSearch($searched)
    {
        $qb = $this
            ->createQueryBuilder('b')
            ->where('b.isbn LIKE :searched')
            ->orWhere('b.titre LIKE :searched')
            ->setParameter('searched', '%'.$searched.'%')
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function authorListOfBooks (Author $author){
        $qb = $this
            ->createQueryBuilder('b')
            ->innerJoin(AuthorBook::class , 'ab', 'WITH', 'b.id = ab.book ')
            ->where('ab.author = :author')
            ->setParameter('author',$author)
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function popularCategories ($limit){
        $qb = $this
            ->createQueryBuilder('b')
            ->select('count(b.category) as categoryCount, b.category')
            ->groupBy('b.category')
            ->orderBy('categoryCount' , 'DESC')
            ->setMaxResults( $limit );
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }


    public function popularBooks ($limit){
        $qb = $this
            ->createQueryBuilder('b')
            ->orderBy('b.viewsCount' , 'DESC')
            ->setMaxResults( $limit );
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function listCategories (){
        $qb = $this
            ->createQueryBuilder('b')
            ->select('count(b.category) as categoryCount, b.category')
            ->groupBy('b.category')
            ->orderBy('categoryCount' , 'DESC')
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function randomBooks($limit){
        $qb = $this
            ->createQueryBuilder('b')
            ->addSelect('RAND() as HIDDEN rand')
            ->addOrderBy('rand')
            ->setMaxResults($limit)
        ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function booksList ($letter = null){
        $qb = $this
            ->createQueryBuilder('b')
            ->orderBy('b.titre' , 'ASC')
        ;
        if ($letter){
            $qb->where('b.titre LIKE :letter')
                ->setParameter('letter', $letter.'%')
                ;
        }
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
    public function categoriesList ($letter = null){
        $qb = $this
            ->createQueryBuilder('b')
            ->select('count(b.category) as categoryCount, b.category')
            ->groupBy('b.category')
            ->orderBy('b.category' , 'ASC')
        ;
        if ($letter){
            $qb ->where('b.category LIKE :letter')
                ->setParameter('letter', $letter.'%')
            ;
        }
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

}
